import os

Import('rootDir')
buildname = 'linux64gl'

env = Environment(	TARGET_ARCH='x86_64',
					ENV = {'PATH' : os.environ['PATH']},			# required to set path otherwise it cant find G++ & linker
					tools = ['g++', 'gnulink'],						# make sure it uses gnu linker and compiler
					CXX = 'g++')
Export('env')

print "Executing gcc SConscript..."
print "rootDir: " + rootDir
print "buildname: " + buildname

#execute shader generation script for OpenGL
SConscript('../shaders/SConscript_generate_gl_shaders')

env.AppendUnique(CXXFLAGS=Split("-std=c++11"))						# specify c++11 mode is used for stuff like nullptr
env.AppendUnique(CXXFLAGS=Split(""))

# specify include folder & libs folder
libPaths= ['../libs/linux64', '../libs/common']
additionalIncludes = ['../include/common', '../include/api_gl', '../include/os_linux', '../libs/linux64/include', '../libs/common/include', '../shaders/output_gl']
env.Append(CPPPATH = additionalIncludes)					

# set warnings
env.AppendUnique(CXXFLAGS=['-Wall'])
env.AppendUnique(CXXFLAGS=['-Wextra'])
# env.AppendUnique(CXXFLAGS=['-fms-extensions']) 						# Source: https://gcc.gnu.org/onlinedocs/gcc/Unnamed-Fields.html

# disable certain warinings (Enable when refactoring code)
env.AppendUnique(CXXFLAGS=['-Wno-unknown-pragmas'])				
env.AppendUnique(CXXFLAGS=['-Wno-unused-variable'])
env.AppendUnique(CXXFLAGS=['-Wno-unused-parameter'])
env.AppendUnique(CXXFLAGS=['-Wno-unused-function'])
env.AppendUnique(CXXFLAGS=['-Wno-comment']) 					# disable the "/*" warning

"""
#install libraries! (when building on posix / linux systems)
# TODO: figure out how to extract the libraries correctly
#if (env['PLATFORM'] == "posix") TODO:
installDir = "/usr/lib/x86_64-linux-gnu"
env.Install(installDir, rootDir + "/libs_linux/libGLEW.so.1.10")
env.Install(installDir, rootDir + "/libs_linux/libGLU.so")
env.Install(installDir, rootDir + "/libs_linux/libSDL2-2.0.so.0")
env.Install(installDir, rootDir + "/libs_linux/libassimp.so.3")
env.Alias('install', installDir)
"""

#specify main entrypoint cpp
buildEntrypoint = 'main_linux64gl.cpp'

##############################################################################
# Create release env
envRelease = env.Clone()
envRelease.AppendUnique(CPPDEFINES = ['AGN_RELEASE']) 

envRelease.VariantDir('../genfiles/'+buildname+'/gen-common-release', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files
envRelease.VariantDir('../genfiles/'+buildname+'/gen-api_gl-release', '../source/api_gl', duplicate=0)
envRelease.VariantDir('../genfiles/'+buildname+'/gen-os_linux-release', '../source/os_linux', duplicate=0)
envRelease.VariantDir('../genfiles/'+buildname+'/gen-build-release', '../source/', duplicate=0)

envRelease.AppendUnique(CXXFLAGS=['-O3'])	 													# Level 3 optimizations (release only)

# Gather all cpp files
objsCommonRelease = [file for file in envRelease.Glob('../genfiles/'+buildname+'/gen-common-release/*.cpp')]
objsAPIRelease = [file for file in envRelease.Glob('../genfiles/'+buildname+'/gen-api_gl-release/*.cpp')]
objsOSRelease = [file for file in envRelease.Glob('../genfiles/'+buildname+'/gen-os_linux-release/*.cpp')]
objsBuildRelease = ['../genfiles/'+buildname+'/gen-build-release/' + buildEntrypoint]

"""
# debug/test to display files included 
print "objsCommonRelease length: %i" % len(objsCommonRelease)
for x in range(0, len(objsCommonRelease)):
    print "File %i: '%s'" % (x, objsCommonRelease[x].name)
"""

#specify release libs
releaseLibNames=['SDL2', 'SDL2main', 'GL', 'GLU', 'GLEW', 'assimp']

# create program
applicationProgramRelease = envRelease.Program(source = objsBuildRelease + objsCommonRelease + objsAPIRelease + objsOSRelease, target = "../build/"+buildname+"/agnostik_release", LIBS = releaseLibNames, LIBPATH = libPaths)

##############################################################################
# Create debug env
envDebug = env.Clone()
envDebug.AppendUnique(CXXFLAGS=['-gsplit-dwarf'])							# debug flag in dwarf output (folder is incorrect though)
envDebug.AppendUnique(CXXFLAGS=['-g'])										# debug flag
envDebug.Append(CPPDEFINES = ['AGN_DEBUG'])

envDebug.VariantDir('../genfiles/'+buildname+'/gen-common-debug', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files
envDebug.VariantDir('../genfiles/'+buildname+'/gen-api_gl-debug', '../source/api_gl', duplicate=0)
envDebug.VariantDir('../genfiles/'+buildname+'/gen-os_linux-debug', '../source/os_linux', duplicate=0)
envDebug.VariantDir('../genfiles/'+buildname+'/gen-build-debug', '../source/', duplicate=0)

# Gather all cpp files
objsCommonDebug = [file for file in envDebug.Glob('../genfiles/'+buildname+'/gen-common-debug/*.cpp')]
objsAPIDebug = [file for file in envDebug.Glob('../genfiles/'+buildname+'/gen-api_gl-debug/*.cpp')]
objsOSDebug = [file for file in envDebug.Glob('../genfiles/'+buildname+'/gen-os_linux-debug/*.cpp')]
objsBuildDebug = ['../genfiles/'+buildname+'/gen-build-debug/' + buildEntrypoint]

#specify release libs
debugLibNames=['SDL2', 'SDL2main', 'GL', 'GLU', 'GLEW', 'assimp']

# create program
applicationProgramDebug = envDebug.Program(source = objsBuildDebug + objsCommonDebug + objsAPIDebug + objsOSDebug, target = "../build/"+buildname+"/agnostik_debug", LIBS = debugLibNames, LIBPATH = libPaths)

##############################################################################
Export('env')			# export var to scons main