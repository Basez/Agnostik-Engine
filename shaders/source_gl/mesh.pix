// mesh.pix
#version 420 core

in vec3 v2f_positionWS;
in vec3 v2f_normalWS; 	// Surface normal in world space.
in vec3 v2f_tangentWS;
in vec3 v2f_bitangentWS;
in vec2 v2f_texcoord;

uniform sampler2D diffuseSampler;
uniform sampler2D normalSampler;
uniform sampler2D specularSampler;

layout(binding = 0) uniform LightSettings
{
	uniform vec4 uLightDirection; // Light's direction in world space.
	uniform vec4 uLightColor; // Light's diffuse and specular contribution.
	uniform vec4 uLightAmbient; // Global ambient contribution.
	uniform vec4 uEyePosition;
};

layout(binding = 1) uniform MaterialProperties
{
	uniform vec3 uMaterialDiffuseColor;
	uniform float uMaterialTransparency;
	//
	uniform vec3 uMaterialAmbientColor;
	float uMaterialSpecularPower;
	//
	bool uMaterialHasDiffuse;
	bool uMaterialHasNormalMap;
	bool uMaterialHasSpecularMap;
	//uniform vec3 uMaterialSpecularColor; // TODO:	
};

layout (location=0) out vec4 out_color;

vec4 calculateDiffuse(vec3 a_normal, vec4 a_lightColor, vec3 a_lightDirection)
{
    float nDotL = max(dot(a_normal, a_lightDirection), 0);
    vec4 diffuse = nDotL * a_lightColor * vec4(uMaterialDiffuseColor, 1.0f);
	return clamp(diffuse,0.0f,1.0f);
}

vec4 calculateSpecular(vec3 a_normal, vec4 a_lightColor, vec3 a_lightDirection, float a_specularIntensity)
{
    vec3 directionToEye = normalize(uEyePosition.xyz - v2f_positionWS);
    vec4 materialSpecularColor = vec4(1, 1, 1, 1); // TODO!!!!!!!!!

	// Phong lighting.
    vec3 R = normalize(reflect(-a_lightDirection, a_normal));
    float RdotV = max(0, dot(R, directionToEye));
 
	// Blinn-Phong lighting
    //vec3 H = normalize(-a_lightDirection + directionToEye);
    //vec3 NdotH = max(0, dot(a_normal, H));
 
	vec4 specular = pow(RdotV, uMaterialSpecularPower) * a_lightColor * materialSpecularColor;
	return clamp(specular * a_specularIntensity,0.0f,1.0f);
}

float calculateSpecularIntensity()
{
	if (uMaterialHasSpecularMap) return texture(specularSampler, v2f_texcoord).r + texture(specularSampler, v2f_texcoord).g + texture(specularSampler, v2f_texcoord).b;
	else return 1.0f;
}

vec3 calculateNormal()
{
	if (uMaterialHasNormalMap)
	{
		// get normal from normalmap
		vec3 texNormal = texture(normalSampler, v2f_texcoord).rgb;
	
		// move from 0to1 --> -1 to 1
		texNormal = (texNormal * 2.0f) - 1.0f;
		 
		mat3 tangentBinormalNormalMatrix = transpose(mat3(normalize(v2f_tangentWS), normalize(v2f_bitangentWS), normalize(v2f_normalWS)));
		vec3 bumpedNormal = normalize(texNormal) * tangentBinormalNormalMatrix; 

		return bumpedNormal;
	}
	return normalize(v2f_normalWS);
}

void main()
{
	vec4 textureColor = vec4(0,0,0,0);
	if (uMaterialHasDiffuse) textureColor = texture(diffuseSampler, v2f_texcoord);
	else textureColor = vec4(uMaterialDiffuseColor, 0.0f);
	
	float specularIntensity = calculateSpecularIntensity();
	vec3 normal = calculateNormal();
	vec3 lightDirectionNorm = normalize(uLightDirection).xyz;

	// calculate lighting
	vec4 diffuseLightFactor = calculateDiffuse(normal, uLightColor, lightDirectionNorm);
	vec4 specularLightFactor = calculateSpecular(normal, uLightColor, lightDirectionNorm, specularIntensity);
	vec4 ambientLightFactor = uLightAmbient;

	// calculate final color
	vec4 lighting = diffuseLightFactor + specularLightFactor + ambientLightFactor;
	vec4 finalColor = textureColor * lighting;

	// display spec mapping
	// TODO: Turn on with render option, this is really cool!
	//if (specularIntensity <= 0.33f) out_color = vec4(0,0,1,0);
	//else if (specularIntensity > 0.33f && specularIntensity <= 0.66f)  out_color = vec4(0,1,0,0);
	//else out_color = vec4(1,0,0,0);
	
	out_color = finalColor;
}
