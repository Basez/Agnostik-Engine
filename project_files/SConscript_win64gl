import os

Import('rootDir')
Import('buildname')

env = Environment(TARGET_ARCH='x86_64')

print "Executing MSVC SConscript..."
print "rootDir: " + rootDir
print "buildname: " + buildname

# Compiler & Linker commands
env['MSVC_VERSION'] = '12.0'
env.AppendUnique(CXXFLAGS=Split("/EHsc"))				# specify compiler unwind semantics
env.AppendUnique(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])
env.AppendUnique(LINKFLAGS = ['/MACHINE:X64'])
env['CCPDBFLAGS'] = '/Z7 /Fd${TARGET}.pdb'				# Generate pdb for code debugging (both release and debug) NOTE: changed to /Z7 instead of Zi because that doesnt work with precompiled headers

# specify include folder & libs folder
libPaths= ['../libs/win64']
additionalIncludes = ['../include/common', '../include/api_gl', '../include/os_win', '../libs/win64/include']
env.Append(CPPPATH = additionalIncludes)					

##############################################################################
### Create release env
envRelease = env.Clone()
envRelease.AppendUnique(LINKFLAGS=['/DEBUG'])								# add debug flag, comment out if final release?
envRelease.AppendUnique(CCFLAGS=['/MD'])									

# set variant dirs (temp folders)	
envRelease.VariantDir('../genfiles/gen-common-release', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files
envRelease.VariantDir('../genfiles/gen-api_gl-release', '../source/api_gl', duplicate=0)
envRelease.VariantDir('../genfiles/gen-os_win-release', '../source/os_win', duplicate=0)

# Gather all cpp files
objsCommonRelease = [file for file in envRelease.Glob('../genfiles/gen-common-release/*.cpp')]
objsAPIRelease = [file for file in envRelease.Glob('../genfiles/gen-api_gl-release/*.cpp')]
objsOSRelease = [file for file in envRelease.Glob('../genfiles/gen-os_win-release/*.cpp')]
 
releaseLibNames=['SDL2', 'SDL2main', 'glew32', 'OpenGL32', 'glu32', 'assimp']
#specify release libs

# create program
applicationProgramRelease = envRelease.Program(source = objsCommonRelease + objsAPIRelease + objsOSRelease, target = "../build/"+buildname+"/agnostik_release", LIBS = releaseLibNames, LIBPATH = libPaths)

##############################################################################
### create debug env
envDebug = env.Clone()
		   
# debug specifics
envDebug.Append(LINKFLAGS=['/DEBUG'])
envDebug.AppendUnique(CCFLAGS=['/MDd'])													# Dynamically link with the debugging CRT
envDebug.AppendUnique(CCFLAGS=['/Od'])													# Disable optimizations
#envDebug['PDB']='${TARGET.base}.pdb'													# not sure what this does or why its required?
envDebug.VariantDir('../genfiles/gen-common-debug', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files
envDebug.VariantDir('../genfiles/gen-api_gl-debug', '../source/api_gl', duplicate=0)
envDebug.VariantDir('../genfiles/gen-os_win-debug', '../source/os_win', duplicate=0)
envDebug.Append(CPPDEFINES = ['_DEBUG'])

# Gather all cpp files
objsCommonDebug = [file for file in envDebug.Glob('../genfiles/gen-common-debug/*.cpp')]
objsAPIDebug = [file for file in envDebug.Glob('../genfiles/gen-api_gl-debug/*.cpp')]
objsOSDebug = [file for file in envDebug.Glob('../genfiles/gen-os_win-debug/*.cpp')]
		 
#specify debug libs
debugLibNames=['SDL2', 'SDL2main', 'glew32', 'OpenGL32', 'glu32', 'assimp']

# create debug program
applicationProgramDebug = envDebug.Program(source = objsCommonDebug + objsAPIDebug + objsOSDebug, target = "../build/"+buildname+"/agnostik_debug", LIBS = debugLibNames, LIBPATH = libPaths)

# generate msvs project  # MSVSProject OR MSVSSolution
project = env.MSVSProject(target = 'agnostik_' + buildname + env['MSVSPROJECTSUFFIX'],
                srcs = (Glob('../source/common/*.cpp', strings=True) +					## add all cpp files
						Glob('../source/api_gl/*.cpp', strings=True) +
						Glob('../source/os_win/*.cpp', strings=True)),			
                incs = (Glob('../include/common/*.hpp', strings=True) +					## add all hpp files
						Glob('../include/api_gl/*.hpp', strings=True) +
						Glob('../include/os_win/*.hpp', strings=True)),						
				buildtarget = applicationProgramDebug + applicationProgramRelease,
				variant = ['debug', 'release'],
				runfile = ['../build/'+buildname+'/agnostik_debug', '../build/'+buildname+'/agnostik_release'])
				
##############################################################################
Export('env')			# export var to scons main