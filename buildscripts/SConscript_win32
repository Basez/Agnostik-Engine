import os

Import('rootDir')

env = Environment(TARGET_ARCH='x86')

print "Executing MSVC SConscript..."
print "rootDir: " + rootDir

env['MSVC_VERSION'] = '12.0'
env.AppendUnique(CXXFLAGS=Split("/EHsc"))				# specify compiler unwind semantics
env.AppendUnique(LINKFLAGS = ['/SUBSYSTEM:CONSOLE'])
env['CCPDBFLAGS'] = '/Z7 /Fd${TARGET}.pdb'				# Generate pdb for code debugging (both release and debug) NOTE: changed to /Z7 instead of Zi because that doesnt work with precompiled headers

# specify include folder & libs folder
libPaths=[rootDir+ 'libs/win32']
additionalIncludes = ['../include/common', '../include/win32']
env.Append(CPPPATH = additionalIncludes)					

#setup PCH	
#env['PCHSTOP'] = 'pch_cppoc.hpp'
#env['PCH'] = env.PCH('source/common/pch_cppoc.cpp')[0]

##############################################################################
### Create release env
envRelease = env.Clone()
envRelease.AppendUnique(LINKFLAGS=['/DEBUG'])								# add debug flag, comment out if final release?
envRelease.AppendUnique(CCFLAGS=['/MD'])									
envRelease.VariantDir('../buildfiles/gen-common-release', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files
envRelease.VariantDir('../buildfiles/gen-win32-release', '../source/win32', duplicate=0)

# Gather all cpp files, excluding the PCH (is compiled seperately)
releaseObjs = [file for file in envRelease.Glob('../buildfiles/gen-common-release/*.cpp')]

win32ReleaseObjs = [file for file in envRelease.Glob('../buildfiles/gen-win32-release/*.cpp')]

"""
# debug/test to display files included 
print "releaseObjs length: %i" % len(releaseObjs)
for x in range(0, len(releaseObjs)):
    print "File %i: '%s'" % (x, releaseObjs[x].name)
"""
 
releaseLibNames=['SDL2', 'SDL2main', 'SDL2_ttf', 'glew32', 'OpenGL32', 'glu32', 'assimp']
#specify release libs

# create program
applicationProgramRelease = envRelease.Program(source = releaseObjs + win32ReleaseObjs, target = "../build/win32/agnostik_release")#, LIBS = releaseLibNames, LIBPATH = libPaths)

##############################################################################
### create debug env
envDebug = env.Clone()
		   
# debug specifics
envDebug.Append(LINKFLAGS=['/DEBUG'])
envDebug.AppendUnique(CCFLAGS=['/MDd'])													# Dynamically link with the debugging CRT
envDebug.AppendUnique(CCFLAGS=['/Od'])													# Disable optimizations
#envDebug['PDB']='${TARGET.base}.pdb'													# not sure what this does or why its required?
envDebug.VariantDir('../buildfiles/gen-common-debug', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files	
envDebug.VariantDir('../buildfiles/gen-win32-debug', '../source/win32', duplicate=0)
envDebug.Append(CPPDEFINES = ['_DEBUG'])

# Gather all cpp files, excluding the PCH (is compiled seperately)
debugObjs = [file for file in envDebug.Glob('../buildfiles/gen-common-debug/*.cpp')]
		 
win32DebugObjs = [file for file in envDebug.Glob('../buildfiles/gen-win32-debug/*.cpp')]

#specify debug libs
debugLibNames=['SDL2', 'SDL2main', 'SDL2_ttf', 'glew32', 'OpenGL32', 'glu32', 'assimp']

# create debug program
applicationProgramDebug = envDebug.Program(source = debugObjs + win32DebugObjs, target = "../build/win32/agnostik_debug")#, LIBS = debugLibNames, LIBPATH = libPaths)

# generate msvs project  # MSVSProject OR MSVSSolution
project = env.MSVSProject(target = '../agnostik_win32' + env['MSVSPROJECTSUFFIX'],
                srcs = (Glob('../source/common/*.cpp', strings=True) +					## add all cpp files under common folder
						Glob('../source/win32/*.cpp', strings=True)),					## add all cpp files under win32 folder
                incs = (Glob('../include/*.hpp', strings=True)),						## add all hpp files under include folder
				buildtarget = applicationProgramDebug + applicationProgramRelease,
				variant = ['debug', 'release'],
				runfile = ['build/win32/agnostik_debug', 'build/win32/agnostik_release'])
				
##############################################################################
Export('env')			# export var to scons main
