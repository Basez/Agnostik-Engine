// mesh.pix
#version 400 core
 
in vec4 v2f_normalW; 	// Surface normal in world space.
in vec2 v2f_texcoord;
 
layout(binding = 0) uniform LightSettings
{
	uniform vec4 uLightDirection; // Light's direction in world space.
	uniform vec4 uLightColor; // Light's diffuse and specular contribution.
	uniform vec4 uLightAmbient; // Global ambient contribution.
};

layout(binding = 1) uniform MaterialProperties
{
	uniform vec4 uMaterialDiffuse;
	uniform vec4 uMaterialAmbient;
};

uniform sampler2D textureSampler0;	// Diffuse

layout (location=0) out vec4 out_color;

void main()
{	
	// Compute the diffuse term.
	vec4 N = normalize( v2f_normalW );
	float NdotL = max( dot( N, uLightDirection ), 0 );
	vec4 Diffuse =  NdotL * uLightColor * uMaterialDiffuse;
	 
	vec4 lighting = Diffuse + uMaterialAmbient + uLightAmbient;
	vec4 finalColor = lighting * texture( textureSampler0, v2f_texcoord );
	
	out_color = finalColor;
}