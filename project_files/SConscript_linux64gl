import os

Import('rootDir')
Import('buildname')

env = Environment(	TARGET_ARCH='x86_64',
					ENV = {'PATH' : os.environ['PATH']},			# required to set path otherwise it cant find G++ & linker
					tools = ['g++', 'gnulink'],						# make sure it uses gnu linker and compiler
					CXX = 'g++')

print "Executing gcc SConscript..."
print "rootDir: " + rootDir
print "buildname: " + buildname


env.AppendUnique(CXXFLAGS=Split("-std=c++11"))						# specify c++11 mode is used for stuff like nullptr
#env.AppendUnique(CXXFLAGS=['-Wl,-rpath, /home/basez/Projects/cross-platform-proof-of-concept/build'])

# specify include folder & libs folder
libPaths= ['../libs/linux64']
additionalIncludes = ['../include/common', '../include/api_gl', '../include/os_linux', '../libs/linux64/include']
env.Append(CPPPATH = additionalIncludes)					
	

#setup PCH	
#env['GCHSTOP'] = 'pch_cppoc.hpp'
#env['GCH'] = env.PCH('source/pch_cppoc.cpp')[0]
#generate(env)

"""
#install libraries! (when building on posix / linux systems)
# TODO: figure out how to extract the libraries correctly
#if (env['PLATFORM'] == "posix") TODO:
installDir = "/usr/lib/x86_64-linux-gnu"
env.Install(installDir, rootDir + "/libs_linux/libGLEW.so.1.10")
env.Install(installDir, rootDir + "/libs_linux/libGLU.so")
env.Install(installDir, rootDir + "/libs_linux/libSDL2-2.0.so.0")
env.Install(installDir, rootDir + "/libs_linux/libassimp.so.3")
env.Alias('install', installDir)
"""

##############################################################################
# Create release env
envRelease = env.Clone()
#envRelease.AppendUnique(LINKFLAGS=['/DEBUG'])								# add debug flag, comment out if final release?
envRelease.VariantDir('../genfiles/gen-common-release', '../source/common', duplicate=0)		# specify intermediate folder for generated .obj files
envRelease.VariantDir('../genfiles/gen-api_gl-release', '../source/api_gl', duplicate=0)
envRelease.VariantDir('../genfiles/gen-os_linux-release', '../source/os_linux', duplicate=0)

envRelease.AppendUnique(CXXFLAGS=['-O3'])	 								# Level 3 optimizations (release only)

# Gather all cpp files
objsCommonRelease = [file for file in envRelease.Glob('../genfiles/gen-common-release/*.cpp')]
objsAPIRelease = [file for file in envRelease.Glob('../genfiles/gen-api_gl-release/*.cpp')]
objsOSRelease = [file for file in envRelease.Glob('../genfiles/gen-os_linux-release/*.cpp')]

"""
# debug/test to display files included 
print "objsCommonRelease length: %i" % len(objsCommonRelease)
for x in range(0, len(objsCommonRelease)):
    print "File %i: '%s'" % (x, objsCommonRelease[x].name)
"""

#specify release libs
releaseLibNames=['SDL2', 'SDL2main', 'GL', 'GLU', 'GLEW', 'assimp']

# create program
applicationProgramRelease = envRelease.Program(source = objsCommonRelease + objsAPIRelease + objsOSRelease, target = "../build/"+buildname+"/agnostik_release", LIBS = releaseLibNames, LIBPATH = libPaths)


"""
##############################################################################
# Create debug env
envDebug = env.Clone()
envDebug.AppendUnique(CXXFLAGS=['-gsplit-dwarf'])							# debug flag in dwarf output (folder is incorrect though)
envDebug.AppendUnique(CXXFLAGS=['-g'])										# debug flag
envDebug.VariantDir('buildfiles/gen-common-debug', 'source/common', duplicate=0)
envDebug.VariantDir('buildfiles/gen-linux-debug', 'source/linux', duplicate=0)
envDebug.Append(CPPDEFINES = ['_DEBUG'])

## Gather all cpp files, excluding the PCH (is compiled seperately)
debugObjs = [file for file in envDebug.Glob('buildfiles/gen-common-debug/*.cpp')
         if not file.name.startswith('pch_cppoc')]

debugObjsLinux = [file for file in envDebug.Glob('buildfiles/gen-linux-debug/*.cpp')]

##specify release libs
debugLibNames=['SDL2', 'SDL2main', 'GL', 'GLU', 'GLEW', 'assimp']

## create program
applicationProgramDebug = envDebug.Program(source = debugObjs + debugObjsLinux, target = "build/gcc_debug", LIBS = debugLibNames, LIBPATH = libPaths)
"""

##############################################################################
Export('env')			# export var to scons main