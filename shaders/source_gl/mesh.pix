// mesh.pix
#version 420 core
 
in vec4 v2f_normalWS; 	// Surface normal in world space.
in vec4 v2f_tangentWS;
in vec4 v2f_bitangentWS;
in vec2 v2f_texcoord;

layout(binding = 0) uniform LightSettings
{
	uniform vec4 uLightDirection; // Light's direction in world space.
	uniform vec4 uLightColor; // Light's diffuse and specular contribution.
	uniform vec4 uLightAmbient; // Global ambient contribution.
};

layout(binding = 1) uniform MaterialProperties
{
	uniform float uMaterialTransparency;
	uniform vec3 uMaterialDiffuseColor;
	uniform vec3 uMaterialAmbientColor;
	//uniform vec3 uMaterialSpecularColor;	
};

uniform sampler2D textureSampler0;	// Diffuse

layout (location=0) out vec4 out_color;

void main()
{	
	// Compute the diffuse term.
	vec4 n = normalize( v2f_normalWS );
	float nDotL = max( dot( n, uLightDirection ), 0 );
	vec4 diffuse =  nDotL * uLightColor * vec4(uMaterialDiffuseColor, 1.0f);
	
	vec4 lighting = diffuse + vec4(uMaterialAmbientColor, 0.0f) + uLightAmbient;
	vec4 finalColor = lighting * texture( textureSampler0, v2f_texcoord );
	
	out_color = finalColor * (1 + (uMaterialTransparency * 0.0001));
}
