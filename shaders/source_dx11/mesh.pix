Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

struct InputData
{
	float2 uv : TEXCOORD0;
	float4 normalWS : TEXCOORD1;
};

cbuffer LightSettings : register(b0)
{
	float4 lightDirection; // Light's direction in world space.
	float4 lightColor; // Light's diffuse and specular contribution.
	float4 lightAmbient; // Global ambient contribution.
}

// TODO: fix registers when restoring Cbuffers
cbuffer MaterialProperties : register(b1)
{
	float materialTransparency;
	float3 materialDiffuseColor;
	//-- 16bytes --//
	float3 materialSpecularColor;
	float filler1;
	//-- 16bytes --//
	float3 materialAmbientColor;
	//-- 16bytes --//
}

float4 Main(InputData IN) : SV_TARGET
{
	// get texture color
	float4 textureColor = shaderTexture.Sample(SampleType, IN.uv);

	// calculate diffuse
	float4 normal = normalize( IN.normalWS );
	float nDotL = max( dot( normal, lightDirection ), 0 );
	float4 diffuse =  nDotL * lightColor * float4(materialDiffuseColor, 1.0f);

	// apply ambients and calculate final color
	float4 lighting = diffuse + float4(materialAmbientColor, 0.0f) + lightAmbient;
	float4 finalColor = lighting * textureColor;

	return finalColor;
}
